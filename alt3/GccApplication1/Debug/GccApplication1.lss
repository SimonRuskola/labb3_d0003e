
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00000abc  00000b50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022d  00800126  00800126  00000b76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001289  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b21  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e3  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b8  00000000  00000000  00003258  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000642  00000000  00000000  00003510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097c  00000000  00000000  00003b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000044ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 ab 04 	jmp	0x956	; 0x956 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec eb       	ldi	r30, 0xBC	; 188
  70:	fa e0       	ldi	r31, 0x0A	; 10
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a6 32       	cpi	r26, 0x26	; 38
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a6 e2       	ldi	r26, 0x26	; 38
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 35       	cpi	r26, 0x53	; 83
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <main>
  92:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <LCD_Init>:
	TCCR1B = (1<<CS12); 
	CLKPR  = CLKPR  | (1 << CLKPS0);
}

void buttonInit(void){
	PORTB = PORTB | (1 << 7);
  9a:	e1 e6       	ldi	r30, 0x61	; 97
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 e8       	ldi	r24, 0x80	; 128
  a0:	80 83       	st	Z, r24
  a2:	10 82       	st	Z, r1
  a4:	87 eb       	ldi	r24, 0xB7	; 183
  a6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  aa:	87 e0       	ldi	r24, 0x07	; 7
  ac:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b6:	80 ec       	ldi	r24, 0xC0	; 192
  b8:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  bc:	08 95       	ret

000000be <blinkInit>:
  be:	84 e0       	ldi	r24, 0x04	; 4
  c0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
  ce:	08 95       	ret

000000d0 <writeChar>:
}

void writeChar(char ch, int pos) {
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <writeChar+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	

	volatile int i = 0;
  da:	1a 82       	std	Y+2, r1	; 0x02
  dc:	19 82       	std	Y+1, r1	; 0x01
	if (pos < 0 || pos > 5) {
  de:	66 30       	cpi	r22, 0x06	; 6
  e0:	71 05       	cpc	r23, r1
  e2:	08 f0       	brcs	.+2      	; 0xe6 <writeChar+0x16>
  e4:	e6 c1       	rjmp	.+972    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		return; // do nothing if pos is outside the supported range
	}
	if ((int)ch < (0+48) || (int)ch > (9+48)) {
  e6:	90 ed       	ldi	r25, 0xD0	; 208
  e8:	98 0f       	add	r25, r24
  ea:	9a 30       	cpi	r25, 0x0A	; 10
  ec:	28 f0       	brcs	.+10     	; 0xf8 <writeChar+0x28>
		i=10;
  ee:	8a e0       	ldi	r24, 0x0A	; 10
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	9a 83       	std	Y+2, r25	; 0x02
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	04 c0       	rjmp	.+8      	; 0x100 <writeChar+0x30>
	}else{
        i = ch - 48;
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	c0 97       	sbiw	r24, 0x30	; 48
  fc:	9a 83       	std	Y+2, r25	; 0x02
  fe:	89 83       	std	Y+1, r24	; 0x01
    }
	if(pos==0){
 100:	61 15       	cp	r22, r1
 102:	71 05       	cpc	r23, r1
 104:	09 f0       	breq	.+2      	; 0x108 <writeChar+0x38>
 106:	49 c0       	rjmp	.+146    	; 0x19a <writeChar+0xca>
		LCDDR0 =  (LCDDR0&0xF0)  |        (0xF&ValueArray[i])<<0;
 108:	ac ee       	ldi	r26, 0xEC	; 236
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	8c 91       	ld	r24, X
 10e:	e9 81       	ldd	r30, Y+1	; 0x01
 110:	fa 81       	ldd	r31, Y+2	; 0x02
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	ec 5f       	subi	r30, 0xFC	; 252
 118:	fe 4f       	sbci	r31, 0xFE	; 254
 11a:	90 81       	ld	r25, Z
 11c:	9f 70       	andi	r25, 0x0F	; 15
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	89 2b       	or	r24, r25
 122:	8c 93       	st	X, r24
		LCDDR5 =  (LCDDR5&0xF0)  |  (((0xF<<4)&ValueArray[i])>>4);
 124:	a1 ef       	ldi	r26, 0xF1	; 241
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	2c 91       	ld	r18, X
 12a:	e9 81       	ldd	r30, Y+1	; 0x01
 12c:	fa 81       	ldd	r31, Y+2	; 0x02
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	ec 5f       	subi	r30, 0xFC	; 252
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	80 81       	ld	r24, Z
 138:	91 81       	ldd	r25, Z+1	; 0x01
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	99 27       	eor	r25, r25
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	95 95       	asr	r25
 144:	87 95       	ror	r24
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	95 95       	asr	r25
 14c:	87 95       	ror	r24
 14e:	92 2f       	mov	r25, r18
 150:	90 7f       	andi	r25, 0xF0	; 240
 152:	89 2b       	or	r24, r25
 154:	8c 93       	st	X, r24
		LCDDR10 = (LCDDR10&0xF0) |  (((0xF<<8)&ValueArray[i])>>8);
 156:	a6 ef       	ldi	r26, 0xF6	; 246
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	8c 91       	ld	r24, X
 15c:	e9 81       	ldd	r30, Y+1	; 0x01
 15e:	fa 81       	ldd	r31, Y+2	; 0x02
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ec 5f       	subi	r30, 0xFC	; 252
 166:	fe 4f       	sbci	r31, 0xFE	; 254
 168:	20 81       	ld	r18, Z
 16a:	31 81       	ldd	r19, Z+1	; 0x01
 16c:	22 27       	eor	r18, r18
 16e:	3f 70       	andi	r19, 0x0F	; 15
 170:	80 7f       	andi	r24, 0xF0	; 240
 172:	83 2b       	or	r24, r19
 174:	8c 93       	st	X, r24
		LCDDR15 = (LCDDR15&0xF0) | (((0xF<<12)&ValueArray[i])>>12);
 176:	ab ef       	ldi	r26, 0xFB	; 251
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	8c 91       	ld	r24, X
 17c:	e9 81       	ldd	r30, Y+1	; 0x01
 17e:	fa 81       	ldd	r31, Y+2	; 0x02
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	ec 5f       	subi	r30, 0xFC	; 252
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	91 81       	ldd	r25, Z+1	; 0x01
 18a:	95 95       	asr	r25
 18c:	95 95       	asr	r25
 18e:	95 95       	asr	r25
 190:	95 95       	asr	r25
 192:	80 7f       	andi	r24, 0xF0	; 240
 194:	89 2b       	or	r24, r25
 196:	8c 93       	st	X, r24
 198:	8c c1       	rjmp	.+792    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		
	} else if(pos==1){
 19a:	61 30       	cpi	r22, 0x01	; 1
 19c:	71 05       	cpc	r23, r1
 19e:	09 f0       	breq	.+2      	; 0x1a2 <writeChar+0xd2>
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
		LCDDR0 =     (LCDDR0&0x0F)  |       ((0xF&ValueArray[i])<<4);
 1a2:	ac ee       	ldi	r26, 0xEC	; 236
 1a4:	b0 e0       	ldi	r27, 0x00	; 0
 1a6:	2c 91       	ld	r18, X
 1a8:	e9 81       	ldd	r30, Y+1	; 0x01
 1aa:	fa 81       	ldd	r31, Y+2	; 0x02
 1ac:	ee 0f       	add	r30, r30
 1ae:	ff 1f       	adc	r31, r31
 1b0:	ec 5f       	subi	r30, 0xFC	; 252
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 81       	ld	r24, Z
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	82 95       	swap	r24
 1ba:	92 95       	swap	r25
 1bc:	90 7f       	andi	r25, 0xF0	; 240
 1be:	98 27       	eor	r25, r24
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	98 27       	eor	r25, r24
 1c4:	92 2f       	mov	r25, r18
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	89 2b       	or	r24, r25
 1ca:	8c 93       	st	X, r24
		LCDDR5 =     (LCDDR5&0x0F)  |  (((0xF<<4)&ValueArray[i])>>0);
 1cc:	a1 ef       	ldi	r26, 0xF1	; 241
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	8c 91       	ld	r24, X
 1d2:	e9 81       	ldd	r30, Y+1	; 0x01
 1d4:	fa 81       	ldd	r31, Y+2	; 0x02
 1d6:	ee 0f       	add	r30, r30
 1d8:	ff 1f       	adc	r31, r31
 1da:	ec 5f       	subi	r30, 0xFC	; 252
 1dc:	fe 4f       	sbci	r31, 0xFE	; 254
 1de:	90 81       	ld	r25, Z
 1e0:	90 7f       	andi	r25, 0xF0	; 240
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	89 2b       	or	r24, r25
 1e6:	8c 93       	st	X, r24
		LCDDR10 =    (LCDDR10&0x0F) |  (((0xF<<8)&ValueArray[i])>>4);
 1e8:	a6 ef       	ldi	r26, 0xF6	; 246
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	2c 91       	ld	r18, X
 1ee:	e9 81       	ldd	r30, Y+1	; 0x01
 1f0:	fa 81       	ldd	r31, Y+2	; 0x02
 1f2:	ee 0f       	add	r30, r30
 1f4:	ff 1f       	adc	r31, r31
 1f6:	ec 5f       	subi	r30, 0xFC	; 252
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
 1fc:	91 81       	ldd	r25, Z+1	; 0x01
 1fe:	88 27       	eor	r24, r24
 200:	9f 70       	andi	r25, 0x0F	; 15
 202:	95 95       	asr	r25
 204:	87 95       	ror	r24
 206:	95 95       	asr	r25
 208:	87 95       	ror	r24
 20a:	95 95       	asr	r25
 20c:	87 95       	ror	r24
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	92 2f       	mov	r25, r18
 214:	9f 70       	andi	r25, 0x0F	; 15
 216:	89 2b       	or	r24, r25
 218:	8c 93       	st	X, r24
		LCDDR15 =    (LCDDR15&0x0F) | (((0xF<<12)&ValueArray[i])>>8);
 21a:	ab ef       	ldi	r26, 0xFB	; 251
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	8c 91       	ld	r24, X
 220:	e9 81       	ldd	r30, Y+1	; 0x01
 222:	fa 81       	ldd	r31, Y+2	; 0x02
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ec 5f       	subi	r30, 0xFC	; 252
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	20 81       	ld	r18, Z
 22e:	31 81       	ldd	r19, Z+1	; 0x01
 230:	22 27       	eor	r18, r18
 232:	30 7f       	andi	r19, 0xF0	; 240
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	83 2b       	or	r24, r19
 238:	8c 93       	st	X, r24
 23a:	3b c1       	rjmp	.+630    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
	} else if(pos==2){
 23c:	62 30       	cpi	r22, 0x02	; 2
 23e:	71 05       	cpc	r23, r1
 240:	09 f0       	breq	.+2      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 242:	49 c0       	rjmp	.+146    	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
		LCDDR1 =  (LCDDR1&0xF0)  |        (0xF&ValueArray[i])<<0;
 244:	ad ee       	ldi	r26, 0xED	; 237
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	8c 91       	ld	r24, X
 24a:	e9 81       	ldd	r30, Y+1	; 0x01
 24c:	fa 81       	ldd	r31, Y+2	; 0x02
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	ec 5f       	subi	r30, 0xFC	; 252
 254:	fe 4f       	sbci	r31, 0xFE	; 254
 256:	90 81       	ld	r25, Z
 258:	9f 70       	andi	r25, 0x0F	; 15
 25a:	80 7f       	andi	r24, 0xF0	; 240
 25c:	89 2b       	or	r24, r25
 25e:	8c 93       	st	X, r24
		LCDDR6 =  (LCDDR6&0xF0)  |  (((0xF<<4)&ValueArray[i])>>4);
 260:	a2 ef       	ldi	r26, 0xF2	; 242
 262:	b0 e0       	ldi	r27, 0x00	; 0
 264:	2c 91       	ld	r18, X
 266:	e9 81       	ldd	r30, Y+1	; 0x01
 268:	fa 81       	ldd	r31, Y+2	; 0x02
 26a:	ee 0f       	add	r30, r30
 26c:	ff 1f       	adc	r31, r31
 26e:	ec 5f       	subi	r30, 0xFC	; 252
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	80 81       	ld	r24, Z
 274:	91 81       	ldd	r25, Z+1	; 0x01
 276:	80 7f       	andi	r24, 0xF0	; 240
 278:	99 27       	eor	r25, r25
 27a:	95 95       	asr	r25
 27c:	87 95       	ror	r24
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
 282:	95 95       	asr	r25
 284:	87 95       	ror	r24
 286:	95 95       	asr	r25
 288:	87 95       	ror	r24
 28a:	92 2f       	mov	r25, r18
 28c:	90 7f       	andi	r25, 0xF0	; 240
 28e:	89 2b       	or	r24, r25
 290:	8c 93       	st	X, r24
		LCDDR11 = (LCDDR11&0xF0) |  (((0xF<<8)&ValueArray[i])>>8);
 292:	a7 ef       	ldi	r26, 0xF7	; 247
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	8c 91       	ld	r24, X
 298:	e9 81       	ldd	r30, Y+1	; 0x01
 29a:	fa 81       	ldd	r31, Y+2	; 0x02
 29c:	ee 0f       	add	r30, r30
 29e:	ff 1f       	adc	r31, r31
 2a0:	ec 5f       	subi	r30, 0xFC	; 252
 2a2:	fe 4f       	sbci	r31, 0xFE	; 254
 2a4:	20 81       	ld	r18, Z
 2a6:	31 81       	ldd	r19, Z+1	; 0x01
 2a8:	22 27       	eor	r18, r18
 2aa:	3f 70       	andi	r19, 0x0F	; 15
 2ac:	80 7f       	andi	r24, 0xF0	; 240
 2ae:	83 2b       	or	r24, r19
 2b0:	8c 93       	st	X, r24
		LCDDR16 = (LCDDR16&0xF0) | (((0xF<<12)&ValueArray[i])>>12);
 2b2:	ac ef       	ldi	r26, 0xFC	; 252
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	8c 91       	ld	r24, X
 2b8:	e9 81       	ldd	r30, Y+1	; 0x01
 2ba:	fa 81       	ldd	r31, Y+2	; 0x02
 2bc:	ee 0f       	add	r30, r30
 2be:	ff 1f       	adc	r31, r31
 2c0:	ec 5f       	subi	r30, 0xFC	; 252
 2c2:	fe 4f       	sbci	r31, 0xFE	; 254
 2c4:	91 81       	ldd	r25, Z+1	; 0x01
 2c6:	95 95       	asr	r25
 2c8:	95 95       	asr	r25
 2ca:	95 95       	asr	r25
 2cc:	95 95       	asr	r25
 2ce:	80 7f       	andi	r24, 0xF0	; 240
 2d0:	89 2b       	or	r24, r25
 2d2:	8c 93       	st	X, r24
 2d4:	ee c0       	rjmp	.+476    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		
	} else if(pos==3){
 2d6:	63 30       	cpi	r22, 0x03	; 3
 2d8:	71 05       	cpc	r23, r1
 2da:	09 f0       	breq	.+2      	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
 2dc:	4d c0       	rjmp	.+154    	; 0x378 <__EEPROM_REGION_LENGTH__+0x178>
		LCDDR1 =     (LCDDR1&0x0F)  |       ((0xF&ValueArray[i])<<4);
 2de:	ad ee       	ldi	r26, 0xED	; 237
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	2c 91       	ld	r18, X
 2e4:	e9 81       	ldd	r30, Y+1	; 0x01
 2e6:	fa 81       	ldd	r31, Y+2	; 0x02
 2e8:	ee 0f       	add	r30, r30
 2ea:	ff 1f       	adc	r31, r31
 2ec:	ec 5f       	subi	r30, 0xFC	; 252
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
 2f0:	80 81       	ld	r24, Z
 2f2:	91 81       	ldd	r25, Z+1	; 0x01
 2f4:	82 95       	swap	r24
 2f6:	92 95       	swap	r25
 2f8:	90 7f       	andi	r25, 0xF0	; 240
 2fa:	98 27       	eor	r25, r24
 2fc:	80 7f       	andi	r24, 0xF0	; 240
 2fe:	98 27       	eor	r25, r24
 300:	92 2f       	mov	r25, r18
 302:	9f 70       	andi	r25, 0x0F	; 15
 304:	89 2b       	or	r24, r25
 306:	8c 93       	st	X, r24
		LCDDR6 =     (LCDDR6&0x0F)  |  (((0xF<<4)&ValueArray[i])>>0);
 308:	a2 ef       	ldi	r26, 0xF2	; 242
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	8c 91       	ld	r24, X
 30e:	e9 81       	ldd	r30, Y+1	; 0x01
 310:	fa 81       	ldd	r31, Y+2	; 0x02
 312:	ee 0f       	add	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	ec 5f       	subi	r30, 0xFC	; 252
 318:	fe 4f       	sbci	r31, 0xFE	; 254
 31a:	90 81       	ld	r25, Z
 31c:	90 7f       	andi	r25, 0xF0	; 240
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	89 2b       	or	r24, r25
 322:	8c 93       	st	X, r24
		LCDDR11 =    (LCDDR11&0x0F) |  (((0xF<<8)&ValueArray[i])>>4);
 324:	a7 ef       	ldi	r26, 0xF7	; 247
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	2c 91       	ld	r18, X
 32a:	e9 81       	ldd	r30, Y+1	; 0x01
 32c:	fa 81       	ldd	r31, Y+2	; 0x02
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ec 5f       	subi	r30, 0xFC	; 252
 334:	fe 4f       	sbci	r31, 0xFE	; 254
 336:	80 81       	ld	r24, Z
 338:	91 81       	ldd	r25, Z+1	; 0x01
 33a:	88 27       	eor	r24, r24
 33c:	9f 70       	andi	r25, 0x0F	; 15
 33e:	95 95       	asr	r25
 340:	87 95       	ror	r24
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	95 95       	asr	r25
 348:	87 95       	ror	r24
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	92 2f       	mov	r25, r18
 350:	9f 70       	andi	r25, 0x0F	; 15
 352:	89 2b       	or	r24, r25
 354:	8c 93       	st	X, r24
		LCDDR16 =    (LCDDR16&0x0F) | (((0xF<<12)&ValueArray[i])>>8);
 356:	ac ef       	ldi	r26, 0xFC	; 252
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	8c 91       	ld	r24, X
 35c:	e9 81       	ldd	r30, Y+1	; 0x01
 35e:	fa 81       	ldd	r31, Y+2	; 0x02
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	ec 5f       	subi	r30, 0xFC	; 252
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	20 81       	ld	r18, Z
 36a:	31 81       	ldd	r19, Z+1	; 0x01
 36c:	22 27       	eor	r18, r18
 36e:	30 7f       	andi	r19, 0xF0	; 240
 370:	8f 70       	andi	r24, 0x0F	; 15
 372:	83 2b       	or	r24, r19
 374:	8c 93       	st	X, r24
 376:	9d c0       	rjmp	.+314    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		
	} else if(pos==4){
 378:	64 30       	cpi	r22, 0x04	; 4
 37a:	71 05       	cpc	r23, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <__EEPROM_REGION_LENGTH__+0x180>
 37e:	49 c0       	rjmp	.+146    	; 0x412 <__DATA_REGION_LENGTH__+0x12>
		LCDDR2 =  (LCDDR2&0xF0)  |        (0xF&ValueArray[i])<<0;
 380:	ae ee       	ldi	r26, 0xEE	; 238
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	8c 91       	ld	r24, X
 386:	e9 81       	ldd	r30, Y+1	; 0x01
 388:	fa 81       	ldd	r31, Y+2	; 0x02
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	ec 5f       	subi	r30, 0xFC	; 252
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	90 81       	ld	r25, Z
 394:	9f 70       	andi	r25, 0x0F	; 15
 396:	80 7f       	andi	r24, 0xF0	; 240
 398:	89 2b       	or	r24, r25
 39a:	8c 93       	st	X, r24
		LCDDR7 =  (LCDDR7&0xF0)  |  (((0xF<<4)&ValueArray[i])>>4);
 39c:	a3 ef       	ldi	r26, 0xF3	; 243
 39e:	b0 e0       	ldi	r27, 0x00	; 0
 3a0:	2c 91       	ld	r18, X
 3a2:	e9 81       	ldd	r30, Y+1	; 0x01
 3a4:	fa 81       	ldd	r31, Y+2	; 0x02
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ec 5f       	subi	r30, 0xFC	; 252
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	80 81       	ld	r24, Z
 3b0:	91 81       	ldd	r25, Z+1	; 0x01
 3b2:	80 7f       	andi	r24, 0xF0	; 240
 3b4:	99 27       	eor	r25, r25
 3b6:	95 95       	asr	r25
 3b8:	87 95       	ror	r24
 3ba:	95 95       	asr	r25
 3bc:	87 95       	ror	r24
 3be:	95 95       	asr	r25
 3c0:	87 95       	ror	r24
 3c2:	95 95       	asr	r25
 3c4:	87 95       	ror	r24
 3c6:	92 2f       	mov	r25, r18
 3c8:	90 7f       	andi	r25, 0xF0	; 240
 3ca:	89 2b       	or	r24, r25
 3cc:	8c 93       	st	X, r24
		LCDDR12 = (LCDDR12&0xF0) |  (((0xF<<8)&ValueArray[i])>>8);
 3ce:	a8 ef       	ldi	r26, 0xF8	; 248
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	8c 91       	ld	r24, X
 3d4:	e9 81       	ldd	r30, Y+1	; 0x01
 3d6:	fa 81       	ldd	r31, Y+2	; 0x02
 3d8:	ee 0f       	add	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	ec 5f       	subi	r30, 0xFC	; 252
 3de:	fe 4f       	sbci	r31, 0xFE	; 254
 3e0:	20 81       	ld	r18, Z
 3e2:	31 81       	ldd	r19, Z+1	; 0x01
 3e4:	22 27       	eor	r18, r18
 3e6:	3f 70       	andi	r19, 0x0F	; 15
 3e8:	80 7f       	andi	r24, 0xF0	; 240
 3ea:	83 2b       	or	r24, r19
 3ec:	8c 93       	st	X, r24
		LCDDR17 = (LCDDR17&0xF0) | (((0xF<<12)&ValueArray[i])>>12);
 3ee:	ad ef       	ldi	r26, 0xFD	; 253
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	8c 91       	ld	r24, X
 3f4:	e9 81       	ldd	r30, Y+1	; 0x01
 3f6:	fa 81       	ldd	r31, Y+2	; 0x02
 3f8:	ee 0f       	add	r30, r30
 3fa:	ff 1f       	adc	r31, r31
 3fc:	ec 5f       	subi	r30, 0xFC	; 252
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	91 81       	ldd	r25, Z+1	; 0x01
 402:	95 95       	asr	r25
 404:	95 95       	asr	r25
 406:	95 95       	asr	r25
 408:	95 95       	asr	r25
 40a:	80 7f       	andi	r24, 0xF0	; 240
 40c:	89 2b       	or	r24, r25
 40e:	8c 93       	st	X, r24
 410:	50 c0       	rjmp	.+160    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		
	} else if(pos==5){
 412:	65 30       	cpi	r22, 0x05	; 5
 414:	71 05       	cpc	r23, r1
 416:	09 f0       	breq	.+2      	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 418:	4c c0       	rjmp	.+152    	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
		LCDDR2 =     (LCDDR2&0x0F)  |       ((0xF&ValueArray[i])<<4);
 41a:	ae ee       	ldi	r26, 0xEE	; 238
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	2c 91       	ld	r18, X
 420:	e9 81       	ldd	r30, Y+1	; 0x01
 422:	fa 81       	ldd	r31, Y+2	; 0x02
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	ec 5f       	subi	r30, 0xFC	; 252
 42a:	fe 4f       	sbci	r31, 0xFE	; 254
 42c:	80 81       	ld	r24, Z
 42e:	91 81       	ldd	r25, Z+1	; 0x01
 430:	82 95       	swap	r24
 432:	92 95       	swap	r25
 434:	90 7f       	andi	r25, 0xF0	; 240
 436:	98 27       	eor	r25, r24
 438:	80 7f       	andi	r24, 0xF0	; 240
 43a:	98 27       	eor	r25, r24
 43c:	92 2f       	mov	r25, r18
 43e:	9f 70       	andi	r25, 0x0F	; 15
 440:	89 2b       	or	r24, r25
 442:	8c 93       	st	X, r24
		LCDDR7 =     (LCDDR7&0x0F)  |  (((0xF<<4)&ValueArray[i])>>0);
 444:	a3 ef       	ldi	r26, 0xF3	; 243
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	8c 91       	ld	r24, X
 44a:	e9 81       	ldd	r30, Y+1	; 0x01
 44c:	fa 81       	ldd	r31, Y+2	; 0x02
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	ec 5f       	subi	r30, 0xFC	; 252
 454:	fe 4f       	sbci	r31, 0xFE	; 254
 456:	90 81       	ld	r25, Z
 458:	90 7f       	andi	r25, 0xF0	; 240
 45a:	8f 70       	andi	r24, 0x0F	; 15
 45c:	89 2b       	or	r24, r25
 45e:	8c 93       	st	X, r24
		LCDDR12 =    (LCDDR12&0x0F) |  (((0xF<<8)&ValueArray[i])>>4);
 460:	a8 ef       	ldi	r26, 0xF8	; 248
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	2c 91       	ld	r18, X
 466:	e9 81       	ldd	r30, Y+1	; 0x01
 468:	fa 81       	ldd	r31, Y+2	; 0x02
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	ec 5f       	subi	r30, 0xFC	; 252
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	80 81       	ld	r24, Z
 474:	91 81       	ldd	r25, Z+1	; 0x01
 476:	88 27       	eor	r24, r24
 478:	9f 70       	andi	r25, 0x0F	; 15
 47a:	95 95       	asr	r25
 47c:	87 95       	ror	r24
 47e:	95 95       	asr	r25
 480:	87 95       	ror	r24
 482:	95 95       	asr	r25
 484:	87 95       	ror	r24
 486:	95 95       	asr	r25
 488:	87 95       	ror	r24
 48a:	92 2f       	mov	r25, r18
 48c:	9f 70       	andi	r25, 0x0F	; 15
 48e:	89 2b       	or	r24, r25
 490:	8c 93       	st	X, r24
		LCDDR17 =    (LCDDR17&0x0F) | (((0xF<<12)&ValueArray[i])>>8);
 492:	ad ef       	ldi	r26, 0xFD	; 253
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	8c 91       	ld	r24, X
 498:	e9 81       	ldd	r30, Y+1	; 0x01
 49a:	fa 81       	ldd	r31, Y+2	; 0x02
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	ec 5f       	subi	r30, 0xFC	; 252
 4a2:	fe 4f       	sbci	r31, 0xFE	; 254
 4a4:	20 81       	ld	r18, Z
 4a6:	31 81       	ldd	r19, Z+1	; 0x01
 4a8:	22 27       	eor	r18, r18
 4aa:	30 7f       	andi	r19, 0xF0	; 240
 4ac:	8f 70       	andi	r24, 0x0F	; 15
 4ae:	83 2b       	or	r24, r19
 4b0:	8c 93       	st	X, r24
		
	}
	

}
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <is_prime>:

bool is_prime(long i) {
 4bc:	cf 92       	push	r12
 4be:	df 92       	push	r13
 4c0:	ef 92       	push	r14
 4c2:	ff 92       	push	r15
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	6b 01       	movw	r12, r22
 4ca:	7c 01       	movw	r14, r24
	if(i==1){return false;}
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	c8 16       	cp	r12, r24
 4d0:	d1 04       	cpc	r13, r1
 4d2:	e1 04       	cpc	r14, r1
 4d4:	f1 04       	cpc	r15, r1
 4d6:	a1 f1       	breq	.+104    	; 0x540 <__stack+0x41>
	for(int j=2; j<i;j++){
 4d8:	83 e0       	ldi	r24, 0x03	; 3
 4da:	c8 16       	cp	r12, r24
 4dc:	d1 04       	cpc	r13, r1
 4de:	e1 04       	cpc	r14, r1
 4e0:	f1 04       	cpc	r15, r1
 4e2:	84 f1       	brlt	.+96     	; 0x544 <__stack+0x45>
		if(i%j==0){
 4e4:	d7 01       	movw	r26, r14
 4e6:	c6 01       	movw	r24, r12
 4e8:	81 70       	andi	r24, 0x01	; 1
 4ea:	99 27       	eor	r25, r25
 4ec:	aa 27       	eor	r26, r26
 4ee:	b0 78       	andi	r27, 0x80	; 128
 4f0:	bb 23       	and	r27, r27
 4f2:	54 f4       	brge	.+20     	; 0x508 <__stack+0x9>
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	a1 09       	sbc	r26, r1
 4f8:	b1 09       	sbc	r27, r1
 4fa:	8e 6f       	ori	r24, 0xFE	; 254
 4fc:	9f 6f       	ori	r25, 0xFF	; 255
 4fe:	af 6f       	ori	r26, 0xFF	; 255
 500:	bf 6f       	ori	r27, 0xFF	; 255
 502:	01 96       	adiw	r24, 0x01	; 1
 504:	a1 1d       	adc	r26, r1
 506:	b1 1d       	adc	r27, r1
 508:	89 2b       	or	r24, r25
 50a:	8a 2b       	or	r24, r26
 50c:	8b 2b       	or	r24, r27
 50e:	e1 f0       	breq	.+56     	; 0x548 <__stack+0x49>
 510:	c2 e0       	ldi	r28, 0x02	; 2
 512:	d0 e0       	ldi	r29, 0x00	; 0
 514:	08 c0       	rjmp	.+16     	; 0x526 <__stack+0x27>
 516:	c7 01       	movw	r24, r14
 518:	b6 01       	movw	r22, r12
 51a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__divmodsi4>
 51e:	67 2b       	or	r22, r23
 520:	68 2b       	or	r22, r24
 522:	69 2b       	or	r22, r25
 524:	99 f0       	breq	.+38     	; 0x54c <__stack+0x4d>

}

bool is_prime(long i) {
	if(i==1){return false;}
	for(int j=2; j<i;j++){
 526:	21 96       	adiw	r28, 0x01	; 1
 528:	9e 01       	movw	r18, r28
 52a:	0d 2e       	mov	r0, r29
 52c:	00 0c       	add	r0, r0
 52e:	44 0b       	sbc	r20, r20
 530:	55 0b       	sbc	r21, r21
 532:	2c 15       	cp	r18, r12
 534:	3d 05       	cpc	r19, r13
 536:	4e 05       	cpc	r20, r14
 538:	5f 05       	cpc	r21, r15
 53a:	6c f3       	brlt	.-38     	; 0x516 <__stack+0x17>
		if(i%j==0){
			return false;
			
		}
	}
	return true;
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	07 c0       	rjmp	.+14     	; 0x54e <__stack+0x4f>
	

}

bool is_prime(long i) {
	if(i==1){return false;}
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	05 c0       	rjmp	.+10     	; 0x54e <__stack+0x4f>
		if(i%j==0){
			return false;
			
		}
	}
	return true;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	03 c0       	rjmp	.+6      	; 0x54e <__stack+0x4f>

bool is_prime(long i) {
	if(i==1){return false;}
	for(int j=2; j<i;j++){
		if(i%j==0){
			return false;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	01 c0       	rjmp	.+2      	; 0x54e <__stack+0x4f>
 54c:	80 e0       	ldi	r24, 0x00	; 0
			
		}
	}
	return true;
}
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	08 95       	ret

0000055c <printAt>:


void printAt(long num, int pos) {
 55c:	cf 92       	push	r12
 55e:	df 92       	push	r13
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	00 d0       	rcall	.+0      	; 0x56e <printAt+0x12>
 56e:	cd b7       	in	r28, 0x3d	; 61
 570:	de b7       	in	r29, 0x3e	; 62
 572:	6b 01       	movw	r12, r22
 574:	7c 01       	movw	r14, r24
 576:	8a 01       	movw	r16, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 578:	24 e6       	ldi	r18, 0x64	; 100
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__divmodsi4>
 584:	2a e0       	ldi	r18, 0x0A	; 10
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__divmodsi4>
 590:	b8 01       	movw	r22, r16
 592:	80 e3       	ldi	r24, 0x30	; 48
 594:	82 0f       	add	r24, r18
 596:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
	for(volatile int i=0; i<1000; i++){
 59a:	1a 82       	std	Y+2, r1	; 0x02
 59c:	19 82       	std	Y+1, r1	; 0x01
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	9a 81       	ldd	r25, Y+2	; 0x02
 5a2:	88 3e       	cpi	r24, 0xE8	; 232
 5a4:	93 40       	sbci	r25, 0x03	; 3
 5a6:	54 f4       	brge	.+20     	; 0x5bc <printAt+0x60>
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	9a 81       	ldd	r25, Y+2	; 0x02
 5ac:	01 96       	adiw	r24, 0x01	; 1
 5ae:	9a 83       	std	Y+2, r25	; 0x02
 5b0:	89 83       	std	Y+1, r24	; 0x01
 5b2:	89 81       	ldd	r24, Y+1	; 0x01
 5b4:	9a 81       	ldd	r25, Y+2	; 0x02
 5b6:	88 3e       	cpi	r24, 0xE8	; 232
 5b8:	93 40       	sbci	r25, 0x03	; 3
 5ba:	b4 f3       	brlt	.-20     	; 0x5a8 <printAt+0x4c>
		
	}
    pp++;
    writeChar( num % 10 + '0', pp);
 5bc:	0f 5f       	subi	r16, 0xFF	; 255
 5be:	1f 4f       	sbci	r17, 0xFF	; 255
 5c0:	c7 01       	movw	r24, r14
 5c2:	b6 01       	movw	r22, r12
 5c4:	2a e0       	ldi	r18, 0x0A	; 10
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	40 e0       	ldi	r20, 0x00	; 0
 5ca:	50 e0       	ldi	r21, 0x00	; 0
 5cc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__divmodsi4>
 5d0:	86 2f       	mov	r24, r22
 5d2:	b8 01       	movw	r22, r16
 5d4:	80 5d       	subi	r24, 0xD0	; 208
 5d6:	0e 94 68 00 	call	0xd0	; 0xd0 <writeChar>
}
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	08 95       	ret

000005f0 <computePrimes>:

void computePrimes(int pos) {
 5f0:	ec 01       	movw	r28, r24
    long n = 2;
 5f2:	c1 2c       	mov	r12, r1
 5f4:	d1 2c       	mov	r13, r1
 5f6:	76 01       	movw	r14, r12
 5f8:	68 94       	set
 5fa:	c1 f8       	bld	r12, 1

    
	while (true)
	{
	    if (is_prime(n)) {
 5fc:	c7 01       	movw	r24, r14
 5fe:	b6 01       	movw	r22, r12
 600:	0e 94 5e 02 	call	0x4bc	; 0x4bc <is_prime>
 604:	88 23       	and	r24, r24
 606:	29 f0       	breq	.+10     	; 0x612 <computePrimes+0x22>
            printAt(n, pos);
 608:	ae 01       	movw	r20, r28
 60a:	c7 01       	movw	r24, r14
 60c:	b6 01       	movw	r22, r12
 60e:	0e 94 ae 02 	call	0x55c	; 0x55c <printAt>
        }
	    n++;
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	c8 1a       	sub	r12, r24
 616:	d8 0a       	sbc	r13, r24
 618:	e8 0a       	sbc	r14, r24
 61a:	f8 0a       	sbc	r15, r24
	}
 61c:	ef cf       	rjmp	.-34     	; 0x5fc <computePrimes+0xc>

0000061e <Cycle>:
}



bool Cycle(void){
	if(blinkCounter>=1){
 61e:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 622:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 626:	18 16       	cp	r1, r24
 628:	19 06       	cpc	r1, r25
 62a:	34 f4       	brge	.+12     	; 0x638 <Cycle+0x1a>
		blinkCounter = 0;
 62c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
 630:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
		return true;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	08 95       	ret
	}
	return false;
 638:	80 e0       	ldi	r24, 0x00	; 0
	
}
 63a:	08 95       	ret

0000063c <blink>:



void blink(int n){
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29

	
	while (Cycle())
	{
		
		LCDDR3 = !LCDDR3;
 644:	cf ee       	ldi	r28, 0xEF	; 239
 646:	d0 e0       	ldi	r29, 0x00	; 0
 648:	11 e0       	ldi	r17, 0x01	; 1
 64a:	00 e0       	ldi	r16, 0x00	; 0

void blink(int n){
	

	
	while (Cycle())
 64c:	05 c0       	rjmp	.+10     	; 0x658 <blink+0x1c>
	{
		
		LCDDR3 = !LCDDR3;
 64e:	98 81       	ld	r25, Y
 650:	81 2f       	mov	r24, r17
 652:	91 11       	cpse	r25, r1
 654:	80 2f       	mov	r24, r16
 656:	88 83       	st	Y, r24

void blink(int n){
	

	
	while (Cycle())
 658:	0e 94 0f 03 	call	0x61e	; 0x61e <Cycle>
 65c:	81 11       	cpse	r24, r1
 65e:	f7 cf       	rjmp	.-18     	; 0x64e <blink+0x12>
	
	
	
	
	
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <pressed>:

bool pressed(void){
	curButtonVal = (PINB>>7);
 66a:	83 b1       	in	r24, 0x03	; 3
 66c:	88 1f       	adc	r24, r24
 66e:	88 27       	eor	r24, r24
 670:	88 1f       	adc	r24, r24
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <curButtonVal+0x1>
 678:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <curButtonVal>
	if(lastButtonVal != curButtonVal){
 67c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <lastButtonVal>
 680:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <lastButtonVal+0x1>
 684:	82 17       	cp	r24, r18
 686:	93 07       	cpc	r25, r19
 688:	31 f0       	breq	.+12     	; 0x696 <pressed+0x2c>
		lastButtonVal = curButtonVal;
 68a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <lastButtonVal+0x1>
 68e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <lastButtonVal>
		return true;
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	08 95       	ret
	}

	return false;
 696:	80 e0       	ldi	r24, 0x00	; 0

	
}
 698:	08 95       	ret

0000069a <button>:

void button(int pos){
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	ec 01       	movw	r28, r24

	
    if(pressed()){
 6a0:	0e 94 35 03 	call	0x66a	; 0x66a <pressed>
 6a4:	88 23       	and	r24, r24
 6a6:	b9 f0       	breq	.+46     	; 0x6d6 <button+0x3c>
    	buttoncounter++;
 6a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 6b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    	printAt(buttoncounter/2,pos);
 6ba:	bc 01       	movw	r22, r24
 6bc:	99 23       	and	r25, r25
 6be:	14 f4       	brge	.+4      	; 0x6c4 <button+0x2a>
 6c0:	6f 5f       	subi	r22, 0xFF	; 255
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	75 95       	asr	r23
 6c6:	67 95       	ror	r22
 6c8:	07 2e       	mov	r0, r23
 6ca:	00 0c       	add	r0, r0
 6cc:	88 0b       	sbc	r24, r24
 6ce:	99 0b       	sbc	r25, r25
 6d0:	ae 01       	movw	r20, r28
 6d2:	0e 94 ae 02 	call	0x55c	; 0x55c <printAt>
    }
	

}
 6d6:	df 91       	pop	r29
 6d8:	cf 91       	pop	r28
 6da:	08 95       	ret

000006dc <main>:


int main() {
    LCD_Init();
 6dc:	0e 94 4d 00 	call	0x9a	; 0x9a <LCD_Init>
	blinkInit();
 6e0:	0e 94 5f 00 	call	0xbe	; 0xbe <blinkInit>


	spawn(button,4);
 6e4:	64 e0       	ldi	r22, 0x04	; 4
 6e6:	70 e0       	ldi	r23, 0x00	; 0
 6e8:	8d e4       	ldi	r24, 0x4D	; 77
 6ea:	93 e0       	ldi	r25, 0x03	; 3
 6ec:	0e 94 a2 03 	call	0x744	; 0x744 <spawn>
	spawn(blink,1);
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	70 e0       	ldi	r23, 0x00	; 0
 6f4:	8e e1       	ldi	r24, 0x1E	; 30
 6f6:	93 e0       	ldi	r25, 0x03	; 3
 6f8:	0e 94 a2 03 	call	0x744	; 0x744 <spawn>
	computePrimes(0);
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <computePrimes>

00000704 <dispatch>:
        m->locked = 1;
    } else{
        enqueue(current,&(m->waitQ));
        dispatch(dequeue(&readyQ));
    }
	ENABLE();
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	00 d0       	rcall	.+0      	; 0x70a <dispatch+0x6>
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	9a 83       	std	Y+2, r25	; 0x02
 710:	89 83       	std	Y+1, r24	; 0x01
 712:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <current>
 716:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <current+0x1>
 71a:	06 96       	adiw	r24, 0x06	; 6
 71c:	0e 94 1b 05 	call	0xa36	; 0xa36 <setjmp>
 720:	89 2b       	or	r24, r25
 722:	59 f4       	brne	.+22     	; 0x73a <dispatch+0x36>
 724:	89 81       	ldd	r24, Y+1	; 0x01
 726:	9a 81       	ldd	r25, Y+2	; 0x02
 728:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <current+0x1>
 72c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <current>
 730:	61 e0       	ldi	r22, 0x01	; 1
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	06 96       	adiw	r24, 0x06	; 6
 736:	0e 94 3b 05 	call	0xa76	; 0xa76 <longjmp>
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	08 95       	ret

00000744 <spawn>:
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	00 d0       	rcall	.+0      	; 0x74a <spawn+0x6>
 74a:	cd b7       	in	r28, 0x3d	; 61
 74c:	de b7       	in	r29, 0x3e	; 62
 74e:	f8 94       	cli
 750:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <initialized>
 754:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <initialized+0x1>
 758:	23 2b       	or	r18, r19
 75a:	09 f0       	breq	.+2      	; 0x75e <spawn+0x1a>
 75c:	3f c0       	rjmp	.+126    	; 0x7dc <spawn+0x98>
 75e:	2c e0       	ldi	r18, 0x0C	; 12
 760:	32 e0       	ldi	r19, 0x02	; 2
 762:	30 93 a4 01 	sts	0x01A4, r19	; 0x8001a4 <threads+0x5>
 766:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <threads+0x4>
 76a:	29 e7       	ldi	r18, 0x79	; 121
 76c:	32 e0       	ldi	r19, 0x02	; 2
 76e:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <threads+0x72>
 772:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <threads+0x71>
 776:	26 ee       	ldi	r18, 0xE6	; 230
 778:	32 e0       	ldi	r19, 0x02	; 2
 77a:	30 93 7e 02 	sts	0x027E, r19	; 0x80027e <threads+0xdf>
 77e:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <threads+0xde>
 782:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <threads+0x14c>
 786:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <threads+0x14b>
 78a:	2f 9a       	sbi	0x05, 7	; 5
 78c:	ef 9a       	sbi	0x1d, 7	; 29
 78e:	ec e6       	ldi	r30, 0x6C	; 108
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	20 81       	ld	r18, Z
 794:	20 68       	ori	r18, 0x80	; 128
 796:	20 83       	st	Z, r18
 798:	e1 e6       	ldi	r30, 0x61	; 97
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	20 81       	ld	r18, Z
 79e:	21 60       	ori	r18, 0x01	; 1
 7a0:	20 83       	st	Z, r18
 7a2:	e1 e8       	ldi	r30, 0x81	; 129
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	20 81       	ld	r18, Z
 7a8:	28 60       	ori	r18, 0x08	; 8
 7aa:	20 83       	st	Z, r18
 7ac:	20 81       	ld	r18, Z
 7ae:	25 60       	ori	r18, 0x05	; 5
 7b0:	20 83       	st	Z, r18
 7b2:	ef e6       	ldi	r30, 0x6F	; 111
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	20 81       	ld	r18, Z
 7b8:	22 60       	ori	r18, 0x02	; 2
 7ba:	20 83       	st	Z, r18
 7bc:	26 e4       	ldi	r18, 0x46	; 70
 7be:	3f e0       	ldi	r19, 0x0F	; 15
 7c0:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 7c4:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 7c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 7cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 7d0:	21 e0       	ldi	r18, 0x01	; 1
 7d2:	30 e0       	ldi	r19, 0x00	; 0
 7d4:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <initialized+0x1>
 7d8:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <initialized>
 7dc:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <freeQ>
 7e0:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <freeQ+0x1>
 7e4:	3a 83       	std	Y+2, r19	; 0x02
 7e6:	29 83       	std	Y+1, r18	; 0x01
 7e8:	23 2b       	or	r18, r19
 7ea:	a9 f0       	breq	.+42     	; 0x816 <spawn+0xd2>
 7ec:	e9 81       	ldd	r30, Y+1	; 0x01
 7ee:	fa 81       	ldd	r31, Y+2	; 0x02
 7f0:	44 81       	ldd	r20, Z+4	; 0x04
 7f2:	55 81       	ldd	r21, Z+5	; 0x05
 7f4:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <freeQ+0x1>
 7f8:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <freeQ>
 7fc:	91 83       	std	Z+1, r25	; 0x01
 7fe:	80 83       	st	Z, r24
 800:	73 83       	std	Z+3, r23	; 0x03
 802:	62 83       	std	Z+2, r22	; 0x02
 804:	15 82       	std	Z+5, r1	; 0x05
 806:	14 82       	std	Z+4, r1	; 0x04
 808:	cf 01       	movw	r24, r30
 80a:	06 96       	adiw	r24, 0x06	; 6
 80c:	0e 94 1b 05 	call	0xa36	; 0xa36 <setjmp>
 810:	01 97       	sbiw	r24, 0x01	; 1
 812:	79 f5       	brne	.+94     	; 0x872 <spawn+0x12e>
 814:	01 c0       	rjmp	.+2      	; 0x818 <spawn+0xd4>
 816:	ff cf       	rjmp	.-2      	; 0x816 <spawn+0xd2>
 818:	78 94       	sei
 81a:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <current>
 81e:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <current+0x1>
 822:	ed 91       	ld	r30, X+
 824:	fc 91       	ld	r31, X
 826:	11 97       	sbiw	r26, 0x01	; 1
 828:	12 96       	adiw	r26, 0x02	; 2
 82a:	8d 91       	ld	r24, X+
 82c:	9c 91       	ld	r25, X
 82e:	13 97       	sbiw	r26, 0x03	; 3
 830:	09 95       	icall
 832:	f8 94       	cli
 834:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <current>
 838:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <current+0x1>
 83c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <freeQ>
 840:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <freeQ+0x1>
 844:	95 83       	std	Z+5, r25	; 0x05
 846:	84 83       	std	Z+4, r24	; 0x04
 848:	f0 93 25 01 	sts	0x0125, r31	; 0x800125 <freeQ+0x1>
 84c:	e0 93 24 01 	sts	0x0124, r30	; 0x800124 <freeQ>
 850:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <readyQ>
 854:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <readyQ+0x1>
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	51 f0       	breq	.+20     	; 0x870 <spawn+0x12c>
 85c:	fc 01       	movw	r30, r24
 85e:	24 81       	ldd	r18, Z+4	; 0x04
 860:	35 81       	ldd	r19, Z+5	; 0x05
 862:	30 93 2b 01 	sts	0x012B, r19	; 0x80012b <readyQ+0x1>
 866:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <readyQ>
 86a:	0e 94 82 03 	call	0x704	; 0x704 <dispatch>
 86e:	01 c0       	rjmp	.+2      	; 0x872 <spawn+0x12e>
 870:	ff cf       	rjmp	.-2      	; 0x870 <spawn+0x12c>
 872:	e9 81       	ldd	r30, Y+1	; 0x01
 874:	fa 81       	ldd	r31, Y+2	; 0x02
 876:	36 96       	adiw	r30, 0x06	; 6
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	9a 81       	ldd	r25, Y+2	; 0x02
 87c:	87 59       	subi	r24, 0x97	; 151
 87e:	9f 4f       	sbci	r25, 0xFF	; 255
 880:	91 8b       	std	Z+17, r25	; 0x11
 882:	80 8b       	std	Z+16, r24	; 0x10
 884:	93 8b       	std	Z+19, r25	; 0x13
 886:	82 8b       	std	Z+18, r24	; 0x12
 888:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <current>
 88c:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <current+0x1>
 890:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <readyQ>
 894:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <readyQ+0x1>
 898:	95 83       	std	Z+5, r25	; 0x05
 89a:	84 83       	std	Z+4, r24	; 0x04
 89c:	f0 93 2b 01 	sts	0x012B, r31	; 0x80012b <readyQ+0x1>
 8a0:	e0 93 2a 01 	sts	0x012A, r30	; 0x80012a <readyQ>
 8a4:	89 81       	ldd	r24, Y+1	; 0x01
 8a6:	9a 81       	ldd	r25, Y+2	; 0x02
 8a8:	0e 94 82 03 	call	0x704	; 0x704 <dispatch>
 8ac:	78 94       	sei
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	08 95       	ret

000008b8 <unlock>:
}
void unlock(mutex *m) {
 8b8:	fc 01       	movw	r30, r24
	DISABLE();
 8ba:	f8 94       	cli
    if(m->waitQ){
 8bc:	82 81       	ldd	r24, Z+2	; 0x02
 8be:	93 81       	ldd	r25, Z+3	; 0x03
 8c0:	89 2b       	or	r24, r25
 8c2:	f9 f0       	breq	.+62     	; 0x902 <unlock+0x4a>
        enqueue(current,&readyQ);
 8c4:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <current>
 8c8:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <current+0x1>




static void enqueue(thread p, thread *queue) {
    p->next = *queue;
 8cc:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <readyQ>
 8d0:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <readyQ+0x1>
 8d4:	15 96       	adiw	r26, 0x05	; 5
 8d6:	9c 93       	st	X, r25
 8d8:	8e 93       	st	-X, r24
 8da:	14 97       	sbiw	r26, 0x04	; 4
    *queue = p;
 8dc:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <readyQ+0x1>
 8e0:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <readyQ>
}



static thread dequeue(thread *queue) {
    thread p = *queue;
 8e4:	82 81       	ldd	r24, Z+2	; 0x02
 8e6:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 8e8:	00 97       	sbiw	r24, 0x00	; 0
 8ea:	51 f0       	breq	.+20     	; 0x900 <unlock+0x48>
        *queue = (*queue)->next;
 8ec:	dc 01       	movw	r26, r24
 8ee:	14 96       	adiw	r26, 0x04	; 4
 8f0:	2d 91       	ld	r18, X+
 8f2:	3c 91       	ld	r19, X
 8f4:	15 97       	sbiw	r26, 0x05	; 5
 8f6:	33 83       	std	Z+3, r19	; 0x03
 8f8:	22 83       	std	Z+2, r18	; 0x02
}
void unlock(mutex *m) {
	DISABLE();
    if(m->waitQ){
        enqueue(current,&readyQ);
        dispatch(dequeue(&(m->waitQ)));
 8fa:	0e 94 82 03 	call	0x704	; 0x704 <dispatch>
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <unlock+0x4e>
 900:	ff cf       	rjmp	.-2      	; 0x900 <unlock+0x48>
    }else{
        m->locked = 0; 
 902:	11 82       	std	Z+1, r1	; 0x01
 904:	10 82       	st	Z, r1
    }
	ENABLE();
 906:	78 94       	sei
 908:	08 95       	ret

0000090a <__vector_3>:
    

    initialized = 1;
}

ISR(PCINT1_vect) { 
 90a:	1f 92       	push	r1
 90c:	0f 92       	push	r0
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	0f 92       	push	r0
 912:	11 24       	eor	r1, r1
 914:	2f 93       	push	r18
 916:	3f 93       	push	r19
 918:	4f 93       	push	r20
 91a:	5f 93       	push	r21
 91c:	6f 93       	push	r22
 91e:	7f 93       	push	r23
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
 924:	af 93       	push	r26
 926:	bf 93       	push	r27
 928:	ef 93       	push	r30
 92a:	ff 93       	push	r31
	unlock(getButtonMutex());
 92c:	8e e1       	ldi	r24, 0x1E	; 30
 92e:	91 e0       	ldi	r25, 0x01	; 1
 930:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <unlock>
    
}
 934:	ff 91       	pop	r31
 936:	ef 91       	pop	r30
 938:	bf 91       	pop	r27
 93a:	af 91       	pop	r26
 93c:	9f 91       	pop	r25
 93e:	8f 91       	pop	r24
 940:	7f 91       	pop	r23
 942:	6f 91       	pop	r22
 944:	5f 91       	pop	r21
 946:	4f 91       	pop	r20
 948:	3f 91       	pop	r19
 94a:	2f 91       	pop	r18
 94c:	0f 90       	pop	r0
 94e:	0f be       	out	0x3f, r0	; 63
 950:	0f 90       	pop	r0
 952:	1f 90       	pop	r1
 954:	18 95       	reti

00000956 <__vector_7>:


ISR(TIMER1_COMPA_vect){
 956:	1f 92       	push	r1
 958:	0f 92       	push	r0
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	0f 92       	push	r0
 95e:	11 24       	eor	r1, r1
 960:	2f 93       	push	r18
 962:	3f 93       	push	r19
 964:	4f 93       	push	r20
 966:	5f 93       	push	r21
 968:	6f 93       	push	r22
 96a:	7f 93       	push	r23
 96c:	8f 93       	push	r24
 96e:	9f 93       	push	r25
 970:	af 93       	push	r26
 972:	bf 93       	push	r27
 974:	ef 93       	push	r30
 976:	ff 93       	push	r31
    blinkCounter++;
 978:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
 97c:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <__data_end+0x1>
 986:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__data_end>
    unlock(getBlinkMutex());
 98a:	8a e1       	ldi	r24, 0x1A	; 26
 98c:	91 e0       	ldi	r25, 0x01	; 1
 98e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <unlock>
}
 992:	ff 91       	pop	r31
 994:	ef 91       	pop	r30
 996:	bf 91       	pop	r27
 998:	af 91       	pop	r26
 99a:	9f 91       	pop	r25
 99c:	8f 91       	pop	r24
 99e:	7f 91       	pop	r23
 9a0:	6f 91       	pop	r22
 9a2:	5f 91       	pop	r21
 9a4:	4f 91       	pop	r20
 9a6:	3f 91       	pop	r19
 9a8:	2f 91       	pop	r18
 9aa:	0f 90       	pop	r0
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	0f 90       	pop	r0
 9b0:	1f 90       	pop	r1
 9b2:	18 95       	reti

000009b4 <__divmodsi4>:
 9b4:	05 2e       	mov	r0, r21
 9b6:	97 fb       	bst	r25, 7
 9b8:	1e f4       	brtc	.+6      	; 0x9c0 <__divmodsi4+0xc>
 9ba:	00 94       	com	r0
 9bc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__negsi2>
 9c0:	57 fd       	sbrc	r21, 7
 9c2:	07 d0       	rcall	.+14     	; 0x9d2 <__divmodsi4_neg2>
 9c4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__udivmodsi4>
 9c8:	07 fc       	sbrc	r0, 7
 9ca:	03 d0       	rcall	.+6      	; 0x9d2 <__divmodsi4_neg2>
 9cc:	4e f4       	brtc	.+18     	; 0x9e0 <__divmodsi4_exit>
 9ce:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__negsi2>

000009d2 <__divmodsi4_neg2>:
 9d2:	50 95       	com	r21
 9d4:	40 95       	com	r20
 9d6:	30 95       	com	r19
 9d8:	21 95       	neg	r18
 9da:	3f 4f       	sbci	r19, 0xFF	; 255
 9dc:	4f 4f       	sbci	r20, 0xFF	; 255
 9de:	5f 4f       	sbci	r21, 0xFF	; 255

000009e0 <__divmodsi4_exit>:
 9e0:	08 95       	ret

000009e2 <__negsi2>:
 9e2:	90 95       	com	r25
 9e4:	80 95       	com	r24
 9e6:	70 95       	com	r23
 9e8:	61 95       	neg	r22
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	08 95       	ret

000009f2 <__udivmodsi4>:
 9f2:	a1 e2       	ldi	r26, 0x21	; 33
 9f4:	1a 2e       	mov	r1, r26
 9f6:	aa 1b       	sub	r26, r26
 9f8:	bb 1b       	sub	r27, r27
 9fa:	fd 01       	movw	r30, r26
 9fc:	0d c0       	rjmp	.+26     	; 0xa18 <__udivmodsi4_ep>

000009fe <__udivmodsi4_loop>:
 9fe:	aa 1f       	adc	r26, r26
 a00:	bb 1f       	adc	r27, r27
 a02:	ee 1f       	adc	r30, r30
 a04:	ff 1f       	adc	r31, r31
 a06:	a2 17       	cp	r26, r18
 a08:	b3 07       	cpc	r27, r19
 a0a:	e4 07       	cpc	r30, r20
 a0c:	f5 07       	cpc	r31, r21
 a0e:	20 f0       	brcs	.+8      	; 0xa18 <__udivmodsi4_ep>
 a10:	a2 1b       	sub	r26, r18
 a12:	b3 0b       	sbc	r27, r19
 a14:	e4 0b       	sbc	r30, r20
 a16:	f5 0b       	sbc	r31, r21

00000a18 <__udivmodsi4_ep>:
 a18:	66 1f       	adc	r22, r22
 a1a:	77 1f       	adc	r23, r23
 a1c:	88 1f       	adc	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	1a 94       	dec	r1
 a22:	69 f7       	brne	.-38     	; 0x9fe <__udivmodsi4_loop>
 a24:	60 95       	com	r22
 a26:	70 95       	com	r23
 a28:	80 95       	com	r24
 a2a:	90 95       	com	r25
 a2c:	9b 01       	movw	r18, r22
 a2e:	ac 01       	movw	r20, r24
 a30:	bd 01       	movw	r22, r26
 a32:	cf 01       	movw	r24, r30
 a34:	08 95       	ret

00000a36 <setjmp>:
 a36:	dc 01       	movw	r26, r24
 a38:	2d 92       	st	X+, r2
 a3a:	3d 92       	st	X+, r3
 a3c:	4d 92       	st	X+, r4
 a3e:	5d 92       	st	X+, r5
 a40:	6d 92       	st	X+, r6
 a42:	7d 92       	st	X+, r7
 a44:	8d 92       	st	X+, r8
 a46:	9d 92       	st	X+, r9
 a48:	ad 92       	st	X+, r10
 a4a:	bd 92       	st	X+, r11
 a4c:	cd 92       	st	X+, r12
 a4e:	dd 92       	st	X+, r13
 a50:	ed 92       	st	X+, r14
 a52:	fd 92       	st	X+, r15
 a54:	0d 93       	st	X+, r16
 a56:	1d 93       	st	X+, r17
 a58:	cd 93       	st	X+, r28
 a5a:	dd 93       	st	X+, r29
 a5c:	ff 91       	pop	r31
 a5e:	ef 91       	pop	r30
 a60:	8d b7       	in	r24, 0x3d	; 61
 a62:	8d 93       	st	X+, r24
 a64:	8e b7       	in	r24, 0x3e	; 62
 a66:	8d 93       	st	X+, r24
 a68:	8f b7       	in	r24, 0x3f	; 63
 a6a:	8d 93       	st	X+, r24
 a6c:	ed 93       	st	X+, r30
 a6e:	fd 93       	st	X+, r31
 a70:	88 27       	eor	r24, r24
 a72:	99 27       	eor	r25, r25
 a74:	09 94       	ijmp

00000a76 <longjmp>:
 a76:	dc 01       	movw	r26, r24
 a78:	cb 01       	movw	r24, r22
 a7a:	81 30       	cpi	r24, 0x01	; 1
 a7c:	91 05       	cpc	r25, r1
 a7e:	81 1d       	adc	r24, r1
 a80:	2d 90       	ld	r2, X+
 a82:	3d 90       	ld	r3, X+
 a84:	4d 90       	ld	r4, X+
 a86:	5d 90       	ld	r5, X+
 a88:	6d 90       	ld	r6, X+
 a8a:	7d 90       	ld	r7, X+
 a8c:	8d 90       	ld	r8, X+
 a8e:	9d 90       	ld	r9, X+
 a90:	ad 90       	ld	r10, X+
 a92:	bd 90       	ld	r11, X+
 a94:	cd 90       	ld	r12, X+
 a96:	dd 90       	ld	r13, X+
 a98:	ed 90       	ld	r14, X+
 a9a:	fd 90       	ld	r15, X+
 a9c:	0d 91       	ld	r16, X+
 a9e:	1d 91       	ld	r17, X+
 aa0:	cd 91       	ld	r28, X+
 aa2:	dd 91       	ld	r29, X+
 aa4:	ed 91       	ld	r30, X+
 aa6:	fd 91       	ld	r31, X+
 aa8:	0d 90       	ld	r0, X+
 aaa:	f8 94       	cli
 aac:	fe bf       	out	0x3e, r31	; 62
 aae:	0f be       	out	0x3f, r0	; 63
 ab0:	ed bf       	out	0x3d, r30	; 61
 ab2:	ed 91       	ld	r30, X+
 ab4:	fd 91       	ld	r31, X+
 ab6:	09 94       	ijmp

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
